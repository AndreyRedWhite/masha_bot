import os
import hashlib
import asyncio
import aiofiles
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, BufferedInputFile
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.session.aiohttp import AiohttpSession
from botocore.client import Config
from dotenv import load_dotenv
import logging
import boto3

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
session = AiohttpSession()
bot = Bot(token=os.getenv("BOT_TOKEN"), session=session)
dp = Dispatcher()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ S3 –¥–ª—è MinIO
s3 = boto3.client(
    's3',
    endpoint_url=os.getenv("MINIO_ENDPOINT"),
    aws_access_key_id=os.getenv("MINIO_ACCESS_KEY"),
    aws_secret_access_key=os.getenv("MINIO_SECRET_KEY"),
    config=Config(signature_version='s3v4')
)

bucket_name = os.getenv("MINIO_BUCKET_NAME")

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è file_id
file_ids = {}


def calculate_file_hash(file_path):
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ö–µ—à–∞ –¥–ª—è —Ñ–∞–π–ª–∞."""
    hash_md5 = hashlib.md5()
    with open(file_path, "rb") as f:
        for chunk in iter(lambda: f.read(4096), b""):
            hash_md5.update(chunk)
    return hash_md5.hexdigest()


async def download_file_from_minio(file_key, file_path):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –∏–∑ MinIO."""
    loop = asyncio.get_event_loop()
    await loop.run_in_executor(None, s3.download_file, bucket_name, file_key, file_path)
    logger.info(f"–§–∞–π–ª {file_key} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ {file_path}")


@dp.message(F.text == "/start")
async def send_welcome(message: Message):
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    first_name = message.from_user.first_name or ""
    last_name = message.from_user.last_name or ""

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="–°–∫–∞—á–∞—Ç—å –ø–∞–∫ —Ö—ç–ª–ª–æ—É–∏–Ω", callback_data="download_images")
    keyboard.button(text="–°–∫–∞—á–∞—Ç—å –ø–∞–∫ –∫–æ—Ç–∏–∫–∏", callback_data="download_wallpapers")
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, <b>{first_name} {last_name}</b>! –≠—Ç–æ –±–æ—Ç –ú–∞—à–∏ ü§ó\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç "
                         f"—Å–∫–∞—á–∏–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–∞–∫–∏ —Å –∫—Ä—É—Ç—ã–º–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ üî• üîù\n–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å"
                         f" —Å–∫–∞—á–∞—Ç—å:", reply_markup=keyboard.as_markup(), parse_mode=ParseMode.HTML)


@dp.callback_query(F.data.in_({"download_images", "download_wallpapers"}))
async def process_callback(callback: CallbackQuery):
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∑–Ω–∞—á–æ–∫ "–≤—Ä–µ–º—è" —Å –∫–Ω–æ–ø–∫–∏
    await callback.answer()

    if callback.data == "download_images":
        file_key = "archive.zip"
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª —Ñ–∞–π–ª: archive.zip")
    elif callback.data == "download_wallpapers":
        file_key = "wallpapers_pack.zip"

    # –ï—Å–ª–∏ file_id —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –Ω–∞–ø—Ä—è–º—É—é
    if file_key in file_ids:
        await bot.send_document(callback.from_user.id, file_ids[file_key])
        logger.info(f"–§–∞–π–ª {file_key} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ file_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback.from_user.id}")
        return

    file_path = f"/tmp/{file_key}"

    try:
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –∑–∞–≥—Ä—É–∑–∫–µ
        loading_message = await bot.send_message(callback.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ "
                                                                        "—Ö—Ä–∞–Ω–∏–ª–∏—â–∞...")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        need_download = True
        if os.path.exists(file_path):
            local_file_hash = calculate_file_hash(file_path)
            minio_obj = s3.get_object(Bucket=bucket_name, Key=file_key)
            minio_file_hash = hashlib.md5(minio_obj['Body'].read()).hexdigest()
            if local_file_hash == minio_file_hash:
                logger.info("–õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –∞–∫—Ç—É–∞–ª–µ–Ω, –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ MinIO –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
                need_download = False

        # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –∏–∑ MinIO
        if need_download:
            await download_file_from_minio(file_key, file_path)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ "–ì–æ—Ç–æ–≤–æ! –°–µ–π—á–∞—Å –∑–∞–≥—Ä—É–∑–∏–º –µ–≥–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¢–ì –∏ –ø–µ—Ä–µ–¥–∞–¥–∏–º –≤–∞–º, –±—É–∫–≤–∞–ª—å–Ω–æ 5-6 —Å–µ–∫—É–Ω–¥..."
        await bot.edit_message_text("–ì–æ—Ç–æ–≤–æ! –°–µ–π—á–∞—Å –∑–∞–≥—Ä—É–∑–∏–º –µ–≥–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¢–µ–ª–µ–≥—Ä–∞–º –∏ –ø–µ—Ä–µ–¥–∞–¥–∏–º –≤–∞–º, –±—É–∫–≤–∞–ª—å–Ω–æ 5-6 —Å–µ–∫—É–Ω–¥...",
                                    chat_id=callback.from_user.id, message_id=loading_message.message_id)

        # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ –±—É—Ñ–µ—Ä –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
        async with aiofiles.open(file_path, "rb") as file:
            file_data = await file.read()
            document = BufferedInputFile(file_data, filename=file_key)
            sent_message = await bot.send_document(callback.from_user.id, document=document)
            logger.info(f"–§–∞–π–ª {file_key} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback.from_user.id}")

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ file_id –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            file_ids[file_key] = sent_message.document.file_id

    except Exception as e:
        error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}"
        await bot.send_message(callback.from_user.id, error_message)
        logger.error(error_message)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
