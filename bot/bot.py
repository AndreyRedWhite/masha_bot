import os
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.enums import ParseMode
from dotenv import load_dotenv
import logging
from prompt_gen import generate_prompt  # –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º—Ç–∞

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(F.text == "/start")
async def send_welcome(message: Message):
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    first_name = message.from_user.first_name or "–ì–æ—Å—Ç—å"
    last_name = message.from_user.last_name or ""

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–î–∞–π –∑–∞–¥–∞–Ω–∏–µ"
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–î–∞–π –∑–∞–¥–∞–Ω–∏–µ!", callback_data="generate_prompt")]]
    )

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, <b>{first_name} {last_name}</b>! üëã\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å –≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —É—á–∏—Ç—å—Å—è —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –≤ MidJourney.\n\n"
        "üéØ <b>–ß—Ç–æ —è —É–º–µ—é?</b>\n"
        "–Ø –≥–µ–Ω–µ—Ä–∏—Ä—É—é –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–∞–Ω—É—Ç –æ—Å–Ω–æ–≤–æ–π –¥–ª—è —è—Ä–∫–∏—Ö –∏ —Ç–æ—á–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, –∏ —è –≤—ã–±–µ—Ä—É:\n\n"
        "üìå –§–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n"
        "üìå –ü–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–ª–∏ –ø—Ä–µ–¥–º–µ—Ç.\n"
        "üìå –û–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∏–ª–∏ —Å—Ç–∏–ª—è.\n"
        "üìå –ú–µ—Å—Ç–æ –¥–µ–π—Å—Ç–≤–∏—è.\n\n"
        "üí° <b>–¢–≤–æ—è –∑–∞–¥–∞—á–∞:</b>\n"
        "–°–æ—Å—Ç–∞–≤—å –ø—Ä–æ–º–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–∫–∞—á–∞–π —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏!\n\n"
        "–ù–∞–∂–∏–º–∞–π <b>¬´–î–∞–π –∑–∞–¥–∞–Ω–∏–µ!¬ª</b>, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å! üöÄ"
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    await message.answer(welcome_text, reply_markup=keyboard, parse_mode=ParseMode.HTML)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–î–∞–π –∑–∞–¥–∞–Ω–∏–µ!" –∏–ª–∏ "–ï—â—ë"
@dp.callback_query(F.data.in_({"generate_prompt", "more_prompt"}))
async def process_generate_prompt(callback: CallbackQuery):
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–æ–º—Ç–∞
    pers, mat, place, style = generate_prompt()

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ï—â—ë"
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–ï—â—ë", callback_data="more_prompt")]]
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–º—Ç–∞ —Å –∫–Ω–æ–ø–∫–æ–π
    await callback.message.answer(
        f"–í–æ—Ç —Ç–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ:\n"
        f"<b>–ü–µ—Ä—Å–æ–Ω–∞–∂/–ø—Ä–µ–¥–º–µ—Ç:</b> {pers}\n"
        f"<b>–ú–∞—Ç–µ—Ä–∏–∞–ª:</b> {mat}\n"
        f"<b>–ú–µ—Å—Ç–æ:</b> {place}\n"
        f"<b>–°—Ç–∏–ª—å:</b> {style}",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
    await callback.answer()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
